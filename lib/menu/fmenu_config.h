/** \file fmenu_config.h
 * \brief Конфигурация \b FlexMenu
 *
 * \details
 * Файл содержит набор макросов, позволяющих провести "тонкую" настройку проекта,
 * для обеспечения наилучшего соотношения "объем памяти / возможности" и ряд вспомогательных
 * макросов, используемых в проекте.
 *
 * Макросы, начинающиеся на \b ENABLE_ - это переключатели возможностей. Если соответстввующая возможность
 * не требуется, следует заремарить соответствущий макрос, если нужна - ремарку снять.
 *
 * \author \b ARV
 * \date	1 мая 2020 г.
 * \copyright 2020 © ARV. All rights reserved.
 *
 */

#ifndef _FMENU_CONFIG_H_
#define _FMENU_CONFIG_H_

/**
 * макрос для размещение всех константных структур и т.п. данных меню и свойств в памяти программ.
 * заремарить, если все надо размещать в ОЗУ
 * \note размещение в ОЗУ незначительно уменьшает размер кода и увеличивает быстродействие, но при этом
 * расходует значительно больше ОЗУ
 */
#define PLACE_CONST_IN_FLASH

/**
 * количество символов в пункте меню.
 * определяется шириной текстового дисплея или иного средства отображения,
 * а так же эстетическими предпочтениями
 */
#define DISPLAY_WIDTH 20

// Высота меню
#define MENU_HEIGHT 3

// смещение вниз
#define MENU_SHIFT 1

/**
 * количество пробелов слева
 * от текста пункта меню
 */
#define SPACE_LEFT 1

/**
 * количество пробелов справа
 * от текста пункта меню
 */
#define SPACE_RIGHT 0

/**
 * символ, используемый для пометки пункта-субменю,
 * выводится в крайней правой позиции строки с текстом пункта
 */
// #define SUBMENU_SYMBOL '>'
#define SUBMENU_SYMBOL 0x7E


/** ограничитель длины текста пункта меню в символах
 * рекомендуется связывать значение этого макроса с размерами ЖКИ или иного средства
 * отображения меню
 */
#define MENU_TEXT_LEN DISPLAY_WIDTH

/** ограничитель длины текста, представляющего значение свойства, в символах
 * рекомендуется связывать значение этого макроса с размерами ЖКИ или иного средства
 * отображения меню
 */
#define PROP_WIDTH (MENU_TEXT_LEN - 8)

/**
 * разрешить свойства
 *
 * этот параметр глобального действия: при его вылючении все возможности по работе со свойствами,
 * включая загрузку/сохранение и т.п. будут недоступны.
 *
 */
#define ENABLE_PROPERTIES

/**
 * разрешить атомарное изменение 16-битных свойств (см. #PROP_I16, #PROP_U16 и #PROP_H16)
 * \note не имеет значения, если не определено #ENABLE_PROPERTIES
 */
#define ENABLE_ATOMIC_CHANGE_PROPERTIES

/**
 * разрешить 16-битные знаковые свойства (см. #PROP_I16)
 * \note не имеет значения, если не определено #ENABLE_PROPERTIES
 */
#define ENABLE_I16_PROPERTIES

/**
 * разрешить 16-битные беззнаковые свойства (см. #PROP_U16)
 * \note не имеет значения, если не определено #ENABLE_PROPERTIES
 */
#define ENABLE_U16_PROPERTIES

/**
 * разрешить булевы свойства (см. #PROP_BOOL)
 */
#define ENABLE_BOOL_PROPERTIES

/**
 * разрешить свойства типа выбор из списка вариантов (см. #PROP_ENUM)
 */
#define ENABLE_ENUM_PROPERTIES

/**
 * разрешить функцию уведомления об изменении значения свойства (см. #notify_func)
 */
#define ENABLE_NOTIFY_ON_CHANGE_PROPERTY

/**
 * разрешить обработку событий редактирования свойств #MEV_BIG_INC и #MEV_BIG_DEC
 * \note не имеет значения, если не определено #ENABLE_PROPERTIES
 */
#define ENABLE_BIG_STEP_EDIT



#include "ver.h"

#endif /* _FMENU_CONFIG_H_ */
